{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","React","useState","loggedIn","setLoggedIn","loading","setLoading","loginURI","setLoginURI","useEffect","fetch","credentials","then","r","json","logged_in","catch","l","uri","className","style","marginBottom","href","onClick","window","location","replace","e","console","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8LA8GeA,EAlEH,WAEV,MAAgCC,IAAMC,UAAS,GAA/C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BH,IAAMC,UAAUC,GAA9C,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAAgCL,IAAMC,SAAS,IAA/C,mBAAOK,EAAP,KAAiBC,EAAjB,KAsBA,OApBAP,IAAMQ,WAAU,WACdH,GAAW,GAnCNI,MACL,wCACA,CACEC,YAAa,YAEfC,MAAK,SAAAC,GACL,OAAOA,EAAEC,UACRF,MAAK,SAAAC,GACN,OAAOA,EAAEE,YAAa,KAEvBC,OAAM,kBAAM,KA0BEJ,MAAK,SAAAK,GAChBb,EAAYa,GACZX,GAAW,QAEZ,IAEHL,IAAMQ,WAAU,WACTN,GAAaE,GAAYE,IAC5BD,GAAW,GAvDRI,MACL,sCACAE,MAAK,SAAAC,GACL,OAAOA,EAAEC,UACRF,MAAK,SAAAC,GACN,OAAOA,EAAEK,OAEVF,OAAM,kBAAM,QAiDGJ,MAAK,SAAAM,GACXA,GACFV,EAAYU,GAEdZ,GAAW,SAGd,CAACH,EAAUE,IAGZ,qBAAKc,UAAU,MAAf,SACE,sBAAKC,MAAO,CAACC,aAAa,QAA1B,UAEIhB,EAEA,4CAEA,4BACEE,EAAW,wBAA2BJ,GAAY,qBAGpDA,GAAY,uDAGXE,KAAaE,GACZ,mBACEe,KAAMf,EADR,mBAQFJ,GACE,mBACEoB,QAAS,WACPjB,GAAW,GAnEzBI,MACE,kCACA,CACEC,YAAa,YAEfC,MAAK,SAAAC,GACLW,OAAOC,SAASC,QAAQF,OAAOC,SAASH,SAEzCN,OAAM,SAACW,GACNC,QAAQC,MAAMF,GACdH,OAAOC,SAASC,QAAQF,OAAOC,SAASH,UAuDhC,0BCjFGQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.22b3b8e1.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst getSSOUri: () => Promise<string | null> = () => {\n  return fetch(\n    'http://localhost:8080/v1/login_uri'\n  ).then(r => {\n    return r.json();\n  }).then(r => {\n    return r.uri;\n  })\n  .catch(() => null)\n};\n\nconst isLoggedIn: () => Promise<boolean> = () => {\n  return fetch(\n    'http://localhost:8080/v1/is_logged_in',\n    {\n      credentials: 'include'\n    }\n  ).then(r => {\n    return r.json();\n  }).then(r => {\n    return r.logged_in || false;\n  })\n  .catch(() => false)\n}\n\nconst logout = () => {\n  fetch(\n    'http://localhost:8080/v1/logout',\n    {\n      credentials: 'include'\n    }\n  ).then(r => {\n    window.location.replace(window.location.href);\n  })\n  .catch((e) => {\n    console.error(e);\n    window.location.replace(window.location.href);\n  })\n}\n\nconst App = () => {\n\n  const [loggedIn, setLoggedIn] = React.useState(false)\n  const [loading, setLoading] = React.useState(!loggedIn);\n  const [loginURI, setLoginURI] = React.useState('');\n\n  React.useEffect(() => {\n    setLoading(true);\n    isLoggedIn().then(l => {\n      setLoggedIn(l);\n      setLoading(false);\n    })\n  }, []);\n\n  React.useEffect(() => {\n    if (!loggedIn && !loading && !loginURI) {\n      setLoading(true);\n      getSSOUri().then(uri => {\n        if (uri) {\n          setLoginURI(uri) \n        }\n        setLoading(false);\n      })\n    }\n  }, [loggedIn, loading]);\n\n  return (\n    <div className=\"App\">\n      <div style={{marginBottom:'10px'}}>\n        {\n          loading\n          ?\n          <p>Please wait</p>\n          :\n          <p>{\n            loginURI ? 'Click below to login' : (!loggedIn && 'No SP server bro')\n          }</p>\n        }{\n          loggedIn && <p>Click below to logout</p>\n        }\n        {\n          !loading && !!loginURI && (\n            <a\n              href={loginURI}\n            >\n              Login\n            </a>\n          )\n        }\n        {\n          loggedIn && (\n            <a\n              onClick={() => {\n                setLoading(true);\n                logout();\n              }}\n            >\n              Logout\n            </a>\n          )\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}